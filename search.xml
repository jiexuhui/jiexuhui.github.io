<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gin搭建restful框架之swaggerAPI文档</title>
      <link href="2021/01/26/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8BswaggerAPI%E6%96%87%E6%A1%A3/"/>
      <url>2021/01/26/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8BswaggerAPI%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="先下载cmd包，才能执行相关命令"><a href="#先下载cmd包，才能执行相关命令" class="headerlink" title="先下载cmd包，才能执行相关命令"></a>先下载cmd包，才能执行相关命令</h3><p><code>go get -u github.com/swaggo/swag/cmd/swag</code></p><h3 id="在main-go同级目录执行初始化命令"><a href="#在main-go同级目录执行初始化命令" class="headerlink" title="在main.go同级目录执行初始化命令"></a>在main.go同级目录执行初始化命令</h3><p><code>swag init</code></p><p>这个命令会在根目录创建一个文件夹 <code>docs</code>,文件夹内包含三个文件:</p><ul><li><code>docs.go</code></li><li><code>swagger.json</code></li><li><code>swagger.yaml</code></li></ul><h3 id="在路由文件中添加导入swagger插件的代码"><a href="#在路由文件中添加导入swagger插件的代码" class="headerlink" title="在路由文件中添加导入swagger插件的代码"></a>在路由文件中添加导入swagger插件的代码</h3><pre class="line-numbers language-none"><code class="language-none">package initializeimport (_ "livefun/docs" // swager docs"livefun/global""livefun/middleware""livefun/router""github.com/gin-gonic/gin"ginSwagger "github.com/swaggo/gin-swagger""github.com/swaggo/gin-swagger/swaggerFiles")// Routers  路由注册func Routers() *gin.Engine {var Router = gin.Default()global.LF_LOG.Info("use middleware logger")// 跨域Router.Use(middleware.Cors())global.LF_LOG.Info("use middleware cors")Router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))global.LF_LOG.Info("register swagger handler")APIGroup := Router.Group("")router.InitRouter(APIGroup)router.InitBaseRouter(APIGroup)return Router}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="再次执行初始化命令"><a href="#再次执行初始化命令" class="headerlink" title="再次执行初始化命令"></a>再次执行初始化命令</h3><p><code>swag init main.go</code></p><p>访问swagger文档：<a href="http://localhost:8888/swagger/index.html">http://localhost:8888/swagger/index.html</a>  </p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ul><li><code>not yet registered swag</code></li></ul><p>出现这个错误是因为只执行了初始化命令，没有再router中导入 docs</p><p><code>    _ "livefun/docs" // swager docs</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Gin. golang </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin搭建restful框架之gorm</title>
      <link href="2021/01/20/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8Bgorm/"/>
      <url>2021/01/20/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8Bgorm/</url>
      
        <content type="html"><![CDATA[<h3 id="gorm-官方文档"><a href="#gorm-官方文档" class="headerlink" title="gorm 官方文档"></a>gorm 官方文档</h3><p><code>https://github.com/go-gorm/gorm</code></p><h3 id="在app-yaml-中添加mysql-的配置"><a href="#在app-yaml-中添加mysql-的配置" class="headerlink" title="在app.yaml 中添加mysql 的配置"></a>在<code>app.yaml</code> 中添加mysql 的配置</h3><pre class="line-numbers language-none"><code class="language-none"># mysql connect configurationmysql:  path: "127.0.0.1:3306"  config: "charset=utf8mb4&amp;parseTime=True&amp;loc=Local"  db-name: "gotest"  username: "root"  password: "123456"  max-idle-conns: 10  max-open-conns: 10  log-mode: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在<code>config</code> 目录下添加<code>gorm.go</code> 的配置</p><p><code>gorm.go</code></p><pre class="line-numbers language-none"><code class="language-none">package config// Mysql structtype Mysql struct {Path         string `mapstructure:"path" json:"path" yaml:"path"`Config       string `mapstructure:"config" json:"config" yaml:"config"`Dbname       string `mapstructure:"db-name" json:"dbname" yaml:"db-name"`Username     string `mapstructure:"username" json:"username" yaml:"username"`Password     string `mapstructure:"password" json:"password" yaml:"password"`MaxIdleConns int    `mapstructure:"max-idle-conns" json:"maxIdleConns" yaml:"max-idle-conns"`MaxOpenConns int    `mapstructure:"max-open-conns" json:"maxOpenConns" yaml:"max-open-conns"`LogMode      bool   `mapstructure:"log-mode" json:"logMode" yaml:"log-mode"`}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将数据库连接实例绑定到global-变量中"><a href="#将数据库连接实例绑定到global-变量中" class="headerlink" title="将数据库连接实例绑定到global 变量中"></a>将数据库连接实例绑定到global 变量中</h3><p><code>global.go</code></p><pre class="line-numbers language-none"><code class="language-none">package globalimport ("livefun/config""github.com/spf13/viper""go.uber.org/zap""gorm.io/gorm")var (LF_CONFIG config.ServerLF_DB     *gorm.DBLF_VP     *viper.ViperLF_LOG    *zap.Logger)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>在<code>initialize</code> 目录下添加<code>gorm.go</code> 文件</p><pre class="line-numbers language-none"><code class="language-none">package initializeimport ("livefun/global""livefun/model""os""go.uber.org/zap""gorm.io/driver/mysql""gorm.io/gorm""gorm.io/gorm/logger")// Gorm 初始化数据库并产生数据库全局变量func Gorm() {switch global.LF_CONFIG.App.DbType {case "mysql":GormMysql()default:GormMysql()}}var err error// GormMysql 初始化Mysql数据库func GormMysql() {m := global.LF_CONFIG.Mysqldsn := m.Username + ":" + m.Password + "@tcp(" + m.Path + ")/" + m.Dbname + "?" + m.ConfigmysqlConfig := mysql.Config{DSN:                       dsn,   // DSN data source nameDefaultStringSize:         191,   // string 类型字段的默认长度DisableDatetimePrecision:  true,  // 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持DontSupportRenameIndex:    true,  // 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引DontSupportRenameColumn:   true,  // 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列SkipInitializeWithVersion: false, // 根据版本自动配置}gormConfig := config(m.LogMode)if global.LF_DB, err = gorm.Open(mysql.New(mysqlConfig), gormConfig); err != nil {global.LF_LOG.Error("MySQL启动异常", zap.Any("err", err))os.Exit(0)} else {GormDBTables(global.LF_DB)sqlDB, _ := global.LF_DB.DB()sqlDB.SetMaxIdleConns(m.MaxIdleConns)sqlDB.SetMaxOpenConns(m.MaxOpenConns)}}// GormDBTables 注册数据库表专用func GormDBTables(db *gorm.DB) {err := db.AutoMigrate(model.User{},)if err != nil {global.LF_LOG.Error("register table failed", zap.Any("err", err))os.Exit(0)}global.LF_LOG.Info("register table success")}// config 根据配置决定是否开启日志func config(mod bool) (c *gorm.Config) {if mod {c = &amp;gorm.Config{Logger:                                   logger.Default.LogMode(logger.Info),DisableForeignKeyConstraintWhenMigrating: true,}} else {c = &amp;gorm.Config{Logger:                                   logger.Default.LogMode(logger.Silent),DisableForeignKeyConstraintWhenMigrating: true,}}return}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明模型"><a href="#声明模型" class="headerlink" title="声明模型"></a>声明模型</h3><ul><li>新建一个目录<code>model</code>，并添加文件<code>user.go</code></li></ul><p><code>user.go</code></p><pre class="line-numbers language-none"><code class="language-none">package modelimport ("github.com/gofrs/uuid""gorm.io/gorm")// User structtype User struct {gorm.ModelUserid    uuid.UUI  D `json:"uuid" gorm:"comment:用户UUID"`Username  string    `json:"userName" gorm:"comment:用户登录名"`Password  string    `json:"-"  gorm:"comment:用户登录密码"`NickName  string    `json:"nickName" gorm:"default:系统用户;comment:用户昵称" `HeaderImg string    `json:"headerImg" gorm:"default:http://qmplusimg.henrongyi.top/head.png;comment:用户头像"`}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启服务器后，数据库中的表便自动创建好了。</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul><li>在数据库中添加数据</li></ul><pre class="line-numbers language-none"><code class="language-none">func CreateUser() (userInter []model.User, err error) {var users = []model.User{{Username: "test1"}, {Username: "test2"}, {Username: "test3"}}err = global.LF_DB.Create(&amp;users).Errorreturn users, err}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询数据<pre class="line-numbers language-none"><code class="language-none">// Users listfunc Users() (users []model.User, err error) {err = global.LF_DB.Select("userid, username, password").Find(&amp;users).Errorreturn users, err}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> Gin </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin搭建restful框架之Controller</title>
      <link href="2021/01/19/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8BController/"/>
      <url>2021/01/19/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8BController/</url>
      
        <content type="html"><![CDATA[<h3 id="接下来我们来创建传统mvc中的controller-新建-api-目录："><a href="#接下来我们来创建传统mvc中的controller-新建-api-目录：" class="headerlink" title="接下来我们来创建传统mvc中的controller,新建 api 目录："></a>接下来我们来创建传统mvc中的controller,新建 <code>api</code> 目录：</h3><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>go-gin-framework/<br>├── config<br>│   └── app.go<br>│   └── config.go<br>│   └── zap.go<br>├── api<br>│   └── v1<br>│      └── user.go<br>├── core<br>│   └── config.go<br>│   └── zap.go<br>├── initialize<br>│   └── user_router.go<br>├── router<br>│   └── user_router.go<br>├── global<br>│   └── global.go<br>├── utils<br>│   └── directory.go<br>|—— main.go<br>|—— app.yaml</p><pre class="line-numbers language-none"><code class="language-none">``` 把 `user_router.go` 中的内容修改一下，将原先的匿名函数改为调用v1包中的函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>package router</p><p>import (<br>    v1 “livefun/api/v1”</p><pre><code>"github.com/gin-gonic/gin"</code></pre><p>)</p><p>func InitRouter(Router *gin.RouterGroup) {</p><pre><code>UserRouter := Router.Group("user"){    UserRouter.GET("/register", v1.Register)}</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">在user.go中编写Register 方法：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>package v1</p><p>import “github.com/gin-gonic/gin”</p><p>func Register(c *gin.Context) {<br>    c.JSON(200, gin.H{<br>        “message”: “success”,<br>    })<br>}</p><pre><code>到这里我们的框架就基本完成了。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
            <tag> restful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin搭建restful框架三之日志</title>
      <link href="2021/01/18/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8B%E6%97%A5%E5%BF%97/"/>
      <url>2021/01/18/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8B%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h3 id="到目前为止我们的日志都是输出到控制台上的，这显然对于一个项目来说是不合理的，因此我们这一节封装一个log库，使其支持记录文件日志！"><a href="#到目前为止我们的日志都是输出到控制台上的，这显然对于一个项目来说是不合理的，因此我们这一节封装一个log库，使其支持记录文件日志！" class="headerlink" title="到目前为止我们的日志都是输出到控制台上的，这显然对于一个项目来说是不合理的，因此我们这一节封装一个log库，使其支持记录文件日志！"></a>到目前为止我们的日志都是输出到控制台上的，这显然对于一个项目来说是不合理的，因此我们这一节封装一个log库，使其支持记录文件日志！</h3><h3 id="zap是Uber开源的高性能log包，我们使用这个zap来记录系统日志，我们在-core和-config-目录下面新建一个-zap-go-文件，同事新建utils工具包，新建后目录如下："><a href="#zap是Uber开源的高性能log包，我们使用这个zap来记录系统日志，我们在-core和-config-目录下面新建一个-zap-go-文件，同事新建utils工具包，新建后目录如下：" class="headerlink" title="zap是Uber开源的高性能log包，我们使用这个zap来记录系统日志，我们在 core和 config 目录下面新建一个 zap.go 文件，同事新建utils工具包，新建后目录如下："></a>zap是Uber开源的高性能log包，我们使用这个zap来记录系统日志，我们在 <code>core</code>和 <code>config</code> 目录下面新建一个 <code>zap.go</code> 文件，同事新建<code>utils</code>工具包，新建后目录如下：</h3><pre class="line-numbers language-none"><code class="language-none">go-gin-framework/├── config│   └── app.go│   └── config.go│   └── zap.go   ├── core│   └── config.go│   └── zap.go   ├── initialize│   └── user_router.go├── router│   └── router.go├── global│   └── global.go├── utils│   └── directory.go|—— main.go|—— app.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="app-yaml-中也要添加zap的相关配置，用来当做zap的默认配置"><a href="#app-yaml-中也要添加zap的相关配置，用来当做zap的默认配置" class="headerlink" title="app.yaml 中也要添加zap的相关配置，用来当做zap的默认配置"></a>app.yaml 中也要添加zap的相关配置，用来当做zap的默认配置</h3><p><code>app.yaml</code></p><pre class="line-numbers language-none"><code class="language-none">zap:  level: "info"  format: "console"  prefix: "[LIVEFUN]"  director: "log"  link-name: "latest_log"  show-line: true  encode-level: "LowercaseColorLevelEncoder"  stacktrace-key: "stacktrace"  log-in-console: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>config</code> 下面的 <code>zap.go</code> :</p><pre class="line-numbers language-none"><code class="language-none">package configtype Zap struct {Level         string `mapstructure:"level" json:"level" yaml:"level"`Format        string `mapstructure:"format" json:"format" yaml:"format"`Prefix        string `mapstructure:"prefix" json:"prefix" yaml:"prefix"`Director      string `mapstructure:"director" json:"director"  yaml:"director"`LinkName      string `mapstructure:"link-name" json:"linkName" yaml:"link-name"`ShowLine      bool   `mapstructure:"show-line" json:"showLine" yaml:"showLine"`EncodeLevel   string `mapstructure:"encode-level" json:"encodeLevel" yaml:"encode-level"`StacktraceKey string `mapstructure:"stacktrace-key" json:"stacktraceKey" yaml:"stacktrace-key"`LogInConsole  bool   `mapstructure:"log-in-console" json:"logInConsole" yaml:"log-in-console"`}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>core</code> 下面的 <code>zap.go</code>：</p><pre class="line-numbers language-none"><code class="language-none">package coreimport ("fmt""livefun/global""livefun/utils""os""time"zaprotatelogs "github.com/lestrrat-go/file-rotatelogs""go.uber.org/zap""go.uber.org/zap/zapcore")var (err    errorlevel  zapcore.Levelwriter zapcore.WriteSyncer)func init() {if ok, _ := utils.PathExists(global.LF_CONFIG.Zap.Director); !ok { // 判断是否有Director文件夹fmt.Printf("create %v directory\n", global.LF_CONFIG.Zap.Director)_ = os.Mkdir(global.LF_CONFIG.Zap.Director, os.ModePerm)}switch global.LF_CONFIG.Zap.Level { // 初始化配置文件的Levelcase "debug":level = zap.DebugLevelcase "info":level = zap.InfoLevelcase "warn":level = zap.WarnLevelcase "error":level = zap.ErrorLevelcase "dpanic":level = zap.DPanicLevelcase "panic":level = zap.PanicLevelcase "fatal":level = zap.FatalLeveldefault:level = zap.InfoLevel}writer, err = getWriteSyncer() // 使用file-rotatelogs进行日志分割if err != nil {fmt.Printf("Get Write Syncer Failed err:%v", err.Error())return}if level == zap.DebugLevel || level == zap.ErrorLevel {global.LF_LOG = zap.New(getEncoderCore(), zap.AddStacktrace(level))} else {global.LF_LOG = zap.New(getEncoderCore())}if global.LF_CONFIG.Zap.ShowLine {global.LF_LOG.WithOptions(zap.AddCaller())}}// getWriteSyncer zap logger中加入file-rotatelogsfunc getWriteSyncer() (zapcore.WriteSyncer, error) {fileWriter, err := zaprotatelogs.New(global.LF_CONFIG.Zap.Director+string(os.PathSeparator)+"%Y-%m-%d.log",zaprotatelogs.WithLinkName(global.LF_CONFIG.Zap.LinkName),zaprotatelogs.WithMaxAge(7*24*time.Hour),zaprotatelogs.WithRotationTime(24*time.Hour),)if global.LF_CONFIG.Zap.LogInConsole {return zapcore.NewMultiWriteSyncer(zapcore.AddSync(os.Stdout), zapcore.AddSync(fileWriter)), err}return zapcore.AddSync(fileWriter), err}// getEncoderConfig 获取zapcore.EncoderConfigfunc getEncoderConfig() (config zapcore.EncoderConfig) {config = zapcore.EncoderConfig{MessageKey:     "message",LevelKey:       "level",TimeKey:        "time",NameKey:        "logger",CallerKey:      "caller",StacktraceKey:  global.LF_CONFIG.Zap.StacktraceKey,LineEnding:     zapcore.DefaultLineEnding,EncodeLevel:    zapcore.LowercaseLevelEncoder,EncodeTime:     CustomTimeEncoder,EncodeDuration: zapcore.SecondsDurationEncoder,EncodeCaller:   zapcore.FullCallerEncoder,}switch {case global.LF_CONFIG.Zap.EncodeLevel == "LowercaseLevelEncoder": // 小写编码器(默认)config.EncodeLevel = zapcore.LowercaseLevelEncodercase global.LF_CONFIG.Zap.EncodeLevel == "LowercaseColorLevelEncoder": // 小写编码器带颜色config.EncodeLevel = zapcore.LowercaseColorLevelEncodercase global.LF_CONFIG.Zap.EncodeLevel == "CapitalLevelEncoder": // 大写编码器config.EncodeLevel = zapcore.CapitalLevelEncodercase global.LF_CONFIG.Zap.EncodeLevel == "CapitalColorLevelEncoder": // 大写编码器带颜色config.EncodeLevel = zapcore.CapitalColorLevelEncoder}return config}// getEncoder 获取zapcore.Encoderfunc getEncoder() zapcore.Encoder {if global.LF_CONFIG.Zap.Format == "json" {return zapcore.NewJSONEncoder(getEncoderConfig())}return zapcore.NewConsoleEncoder(getEncoderConfig())}// getEncoderCore 获取Encoder的zapcore.Corefunc getEncoderCore() (core zapcore.Core) {return zapcore.NewCore(getEncoder(), writer, level)}// 自定义日志输出时间格式func CustomTimeEncoder(t time.Time, enc zapcore.PrimitiveArrayEncoder) {enc.AppendString(t.Format(global.LF_CONFIG.Zap.Prefix + "2006/01/02 - 15:04:05.000"))}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="我们使用了-file-rotatelogs-这个包来做日志分割"><a href="#我们使用了-file-rotatelogs-这个包来做日志分割" class="headerlink" title="我们使用了 file-rotatelogs 这个包来做日志分割"></a>我们使用了 <code>file-rotatelogs</code> 这个包来做日志分割</h4><pre class="line-numbers language-none"><code class="language-none">// getWriteSyncer zap logger中加入file-rotatelogsfunc getWriteSyncer() (zapcore.WriteSyncer, error) {fileWriter, err := zaprotatelogs.New(global.LF_CONFIG.Zap.Director+string(os.PathSeparator)+"%Y-%m-%d.log",zaprotatelogs.WithLinkName(global.LF_CONFIG.Zap.LinkName),zaprotatelogs.WithMaxAge(7*24*time.Hour),zaprotatelogs.WithRotationTime(24*time.Hour),)if global.LF_CONFIG.Zap.LogInConsole {return zapcore.NewMultiWriteSyncer(zapcore.AddSync(os.Stdout), zapcore.AddSync(fileWriter)), err}return zapcore.AddSync(fileWriter), err}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一段将日志按照日期分割，并且最多保存最近七天的日志</p><h3 id="我们来试一下"><a href="#我们来试一下" class="headerlink" title="我们来试一下"></a>我们来试一下</h3><pre class="line-numbers language-none"><code class="language-none">func RunWindowsServer() {Router := initialize.Routers()address := fmt.Sprintf(":%d", global.LF_CONFIG.App.Addr)time.Sleep(10 * time.Microsecond)s := initServer(address, Router)time.Sleep(10 * time.Microsecond)global.LF_LOG.Info("server run success on ", zap.String("address", address))global.LF_LOG.Error("server run success on ", zap.String("address", address))global.LF_LOG.Warn("server run success on ", zap.String("address", address))fmt.Printf(`Welcome!当前版本:V1.0.0`, address)s.ListenAndServe()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务启动后输出</p><pre class="line-numbers language-none"><code class="language-none">[LIVEFUN]2021/01/19 - 15:18:48.332      info   server run success on   {"address": ":8888"}[LIVEFUN]2021/01/19 - 15:18:48.350      error  server run success on   {"address": ":8888"}[LIVEFUN]2021/01/19 - 15:18:48.351      warn   server run success on   {"address": ":8888"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并且会在项目目录下添加<code>log</code>目录</p>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> GIn </tag>
            
            <tag> restful-api </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Gin框架二封装路由</title>
      <link href="2021/01/15/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%B0%81%E8%A3%85%E8%B7%AF%E7%94%B1/"/>
      <url>2021/01/15/Gin%E6%90%AD%E5%BB%BArestful%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%B0%81%E8%A3%85%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="把路由从main包中抽离出来"><a href="#把路由从main包中抽离出来" class="headerlink" title="把路由从main包中抽离出来"></a>把路由从main包中抽离出来</h2><ol><li>新建一个router目录</li></ol><pre class="line-numbers language-none"><code class="language-none">go-gin-framework/├── router│   └── router.go|—— main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在router目录下新建<code>router.go</code>文件</p><p>2.将<code>main.go</code>中的路由定义转移到<code>router.go</code>中</p><p><code>router.go</code></p><pre class="line-numbers language-none"><code class="language-none">package routerimport "github.com/gin-gonic/gin"func InitRouter() *gin.Engine {r := gin.New()r.Use(gin.Logger())r.Use(gin.Recovery())r.GET("/test", func(c *gin.Context) {c.JSON(200, gin.H{"message": "test",})})return r}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>main.go</code></p><pre class="line-numbers language-none"><code class="language-none">package mainimport ("livefun/router""net/http""time")func main() {router := router.InitRouter()s := &amp;http.Server{Addr:           ":8080",Handler:        router,ReadTimeout:    10 * time.Second,WriteTimeout:   10 * time.Second,MaxHeaderBytes: 1 &lt;&lt; 20,}s.ListenAndServe()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行起来后在浏览器访问<code>http://localhost:8080/test</code>,输出</p><pre class="line-numbers language-none"><code class="language-none">{  "message": "test"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="我们在新建一个目录用来存放一些系统配置-如端口环境等"><a href="#我们在新建一个目录用来存放一些系统配置-如端口环境等" class="headerlink" title="我们在新建一个目录用来存放一些系统配置, 如端口环境等"></a>我们在新建一个目录用来存放一些系统配置, 如端口环境等</h2><pre class="line-numbers language-none"><code class="language-none">go-gin-framework/├── config│   └── app.go├── router│   └── router.go|—— main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.go</code> 的内容如下</p><pre class="line-numbers language-none"><code class="language-none">package configtype App struct {Appname   string `mapstructure:"appname" json:"appname" yaml:"appname"`AppSecret string `mapstructure:"appsecret" json:"appsecret" yaml:"appsecret"`Env       string `mapstructure:"env" json:"env" yaml:"env"`Addr      int    `mapstructure:"addr" json:"addr" yaml:"addr"`DbType    string `mapstructure:"db-type" json:"dbType" yaml:"db-type"`}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在根目录新建一个<code>app.yaml</code>文件用来写配置</p><p><code>app.yaml</code></p><pre class="line-numbers language-none"><code class="language-none">app:  appname: "livefun" # Change to "develop" to skip authentication for development mode  env: "develop"  addr: 8888  db-type: "mysql"  oss-type: "local"  need-init-data: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用viper模块来操作yaml配置文件</p><ul><li>我们先在<code>config</code>目录下面新建一个<code>config.go</code>文件,用于管理结构体,内容如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">package configtype Server struct {App App `mapstructure:"app" json:"app" yaml:"app"`}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再新建一个<code>global</code>文件夹，同时在目录下新建<code>global.go</code>文件，用来定义全局变量，内容如下</li></ul><p><code>global.go</code></p><pre class="line-numbers language-none"><code class="language-none">package globalimport ("livefun/config""github.com/spf13/viper")var (GVA_CONFIG config.ServerGVA_VP     *viper.Viper)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有文件创建完成后目录结构如下：</p><pre class="line-numbers language-none"><code class="language-none">go-gin-framework/├── config│   └── app.go│   └── config.go├── router│   └── router.go├── global│   └── global.go|—— main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改<code>main.go</code>文件：</li></ul><p><code>main.go</code></p><pre class="line-numbers language-none"><code class="language-none">package mainimport ("fmt""livefun/global""livefun/router""net/http""time""github.com/fsnotify/fsnotify""github.com/spf13/viper")func main() {v := viper.New()v.SetConfigFile("app.yaml")err := v.ReadInConfig()if err != nil {panic(fmt.Errorf("Fatal error config file: %s \n", err))}v.WatchConfig()v.OnConfigChange(func(e fsnotify.Event) {fmt.Println("config file changed:", e.Name)if err := v.Unmarshal(&amp;global.GVA_CONFIG); err != nil {fmt.Println(err)}})if err := v.Unmarshal(&amp;global.GVA_CONFIG); err != nil {fmt.Println(err)}router := router.InitRouter()s := &amp;http.Server{Addr:           fmt.Sprintf(":%d", global.GVA_CONFIG.App.Addr),Handler:        router,ReadTimeout:    10 * time.Second,WriteTimeout:   10 * time.Second,MaxHeaderBytes: 1 &lt;&lt; 20,}s.ListenAndServe()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Addr:           fmt.Sprintf(":%d", global.GVA_CONFIG.App.Addr),</code> 如此，我们就可以调用配置文件中的内容了</li></ul><h3 id="但是把初始化配置写在-main-go-中显得太乱了，我们新建一个核心模块-core-把初始化配置的内容剥离出去"><a href="#但是把初始化配置写在-main-go-中显得太乱了，我们新建一个核心模块-core-把初始化配置的内容剥离出去" class="headerlink" title="但是把初始化配置写在 main.go 中显得太乱了，我们新建一个核心模块 core,把初始化配置的内容剥离出去"></a>但是把初始化配置写在 <code>main.go</code> 中显得太乱了，我们新建一个核心模块 <code>core</code>,把初始化配置的内容剥离出去</h3><pre class="line-numbers language-none"><code class="language-none">go-gin-framework/├── config│   └── app.go│   └── config.go├── core│   └── config.go├── router│   └── router.go├── global│   └── global.go|—— main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>config.go</code> 的内容如下：</p><pre class="line-numbers language-none"><code class="language-none">package coreimport ("fmt""livefun/global""github.com/fsnotify/fsnotify""github.com/spf13/viper")var config stringfunc init() {v := viper.New()v.SetConfigFile("app.yaml")err := v.ReadInConfig()if err != nil {panic(fmt.Errorf("Fatal error config file: %s \n", err))}v.WatchConfig()v.OnConfigChange(func(e fsnotify.Event) {fmt.Println("config file changed:", e.Name)if err := v.Unmarshal(&amp;global.LF_CONFIG); err != nil {fmt.Println(err)}})if err := v.Unmarshal(&amp;global.LF_CONFIG); err != nil {fmt.Println(err)}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同理我们把-main-go-中的初始化路由和运行服务部分也剥离出去，-新建一个目录-initialize"><a href="#同理我们把-main-go-中的初始化路由和运行服务部分也剥离出去，-新建一个目录-initialize" class="headerlink" title="同理我们把 main.go 中的初始化路由和运行服务部分也剥离出去， 新建一个目录 initialize"></a>同理我们把 <code>main.go</code> 中的初始化路由和运行服务部分也剥离出去， 新建一个目录 <code>initialize</code></h3><pre class="line-numbers language-none"><code class="language-none">go-gin-framework/├── config│   └── app.go│   └── config.go├── core│   └── config.go├── initialize│   └── user_router.go├── router│   └── router.go├── global│   └── global.go|—— main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>initialize</code> 下 <code>router.go</code> 的内容如下：</p><pre class="line-numbers language-none"><code class="language-none">package initializeimport ("livefun/router""github.com/gin-gonic/gin")func Routers() *gin.Engine {var Router = gin.Default()ApiGroup := Router.Group("")router.InitRouter(ApiGroup)return Router}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="下面我们把运行服务器的代码也放到-core-中去，新建server-go-和-server-win-go-文件"><a href="#下面我们把运行服务器的代码也放到-core-中去，新建server-go-和-server-win-go-文件" class="headerlink" title="下面我们把运行服务器的代码也放到 core 中去，新建server.go 和 server_win.go 文件:"></a>下面我们把运行服务器的代码也放到 <code>core</code> 中去，新建<code>server.go</code> 和 <code>server_win.go</code> 文件:</h3><p><code>server.go</code></p><pre class="line-numbers language-none"><code class="language-none">package coreimport ("fmt""livefun/global""livefun/initialize""time")type server interface {ListenAndServe() error}func RunWindowsServer() {Router := initialize.Routers()address := fmt.Sprintf(":%d", global.LF_CONFIG.App.Addr)time.Sleep(10 * time.Microsecond)s := initServer(address, Router)time.Sleep(10 * time.Microsecond)fmt.Printf(`Welcome!当前版本:V1.0.0`, address)s.ListenAndServe()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>server_win.go</code></p><pre class="line-numbers language-none"><code class="language-none">// +build windowspackage coreimport ("net/http""time""github.com/gin-gonic/gin")func initServer(address string, router *gin.Engine) server {return &amp;http.Server{Addr:           address,Handler:        router,ReadTimeout:    10 * time.Second,WriteTimeout:   10 * time.Second,MaxHeaderBytes: 1 &lt;&lt; 20,}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>// +build windows</code> 这一句是告诉编译器这个文件是windows系统下使用的，同样的可以使用<br><code>// +build !windows</code> 为非windows 系统下使用</p><h3 id="接下来我们修改一下-user-router-go-的内容："><a href="#接下来我们修改一下-user-router-go-的内容：" class="headerlink" title="接下来我们修改一下 user_router.go 的内容："></a>接下来我们修改一下 <code>user_router.go</code> 的内容：</h3><p><code>user_router.go</code></p><pre class="line-numbers language-none"><code class="language-none">package routerimport "github.com/gin-gonic/gin"func InitRouter(Router *gin.RouterGroup) {UserRouter := Router.Group("user"){UserRouter.GET("/test", func(c *gin.Context) {c.JSON(200, gin.H{"message": "test",})})}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最后修改-main-go-的内容："><a href="#最后修改-main-go-的内容：" class="headerlink" title="最后修改 main.go 的内容："></a>最后修改 <code>main.go</code> 的内容：</h3><p><code>main.go</code></p><pre class="line-numbers language-none"><code class="language-none">package mainimport ("livefun/core")func main() {core.RunWindowsServer()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="好了，这样就清爽多了，运行-go-run-main-go-在浏览器中输入localhost-8888-user-test试试吧。"><a href="#好了，这样就清爽多了，运行-go-run-main-go-在浏览器中输入localhost-8888-user-test试试吧。" class="headerlink" title="好了，这样就清爽多了，运行 go run main.go 在浏览器中输入localhost:8888/user/test试试吧。"></a>好了，这样就清爽多了，运行 <code>go run main.go</code> 在浏览器中输入<code>localhost:8888/user/test</code>试试吧。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gin搭建一个restFul框架一</title>
      <link href="2021/01/15/%E4%BD%BF%E7%94%A8gin%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AArestFul%E6%A1%86%E6%9E%B6%E4%B8%80/"/>
      <url>2021/01/15/%E4%BD%BF%E7%94%A8gin%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AArestFul%E6%A1%86%E6%9E%B6%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-gin"><a href="#安装-gin" class="headerlink" title="安装 gin"></a>安装 gin</h2><p>1.安装<br>    <code>go get github.com/gin-gonic/gin</code></p><p>2.导入<br>    <code>import "github.com/gin-gonic/gin"</code></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>1.编写<code>main.go</code>文件</p><pre class="line-numbers language-none"><code class="language-none">func main() {    r := gin.Default()    r.GET("/ping", func(c *gin.Context) {        c.JSON(200, gin.H{        "message": "pong",        })    })    r.Run() // listen and serve on 0.0.0.0:8080}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>执行<code>main.go</code><br><code>go run main.go</code></li></ol><pre class="line-numbers language-none"><code class="language-none">$ go run main.go [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production. - using env:   export GIN_MODE=release - using code:  gin.SetMode(gin.ReleaseMode)[GIN-debug] GET    /ping                     --&gt; main.main.func1 (3 handlers)[GIN-debug] Environment variable PORT is undefined. Using port :8080 by default[GIN-debug] Listening and serving HTTP on :8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.在浏览器中访问 <code>localhost:8080/ping</code>返回</p><pre class="line-numbers language-none"><code class="language-none">{  "message": "pong"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则表示环境安装成功</p>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
            <tag> go </tag>
            
            <tag> rest-api </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
